name: Deploy to roomflux.com

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set overall job timeout
    
    steps:
    - name: Zero-downtime rolling deployment
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        timeout: 25m  # Set SSH timeout
        command_timeout: 20m  # Set command timeout
        script: |
          echo "Starting zero-downtime deployment..."
          cd ~/roomflux
          
          # Stash any local changes and pull latest
          git stash
          git pull origin main
          
          echo "Building new app image with extended timeout..."
          # Build the new app image with timeout and parallel processing
          timeout 15m docker-compose -f docker-compose-production.yaml build --parallel app || {
            echo "Build timed out or failed, trying without parallel..."
            timeout 15m docker-compose -f docker-compose-production.yaml build app
          }
          
          echo "Starting rolling update..."
          # Remove container name constraint temporarily for scaling
          sed -i 's/container_name: roomflux_app/#container_name: roomflux_app/' docker-compose-production.yaml
          
          # Scale up to 2 app containers (old + new)
          docker-compose -f docker-compose-production.yaml up -d --scale app=2 --no-recreate
          
          echo "Waiting for new containers to be healthy..."
          # Wait for new containers to be ready
          sleep 45
          
          # Health check - test multiple times to ensure stability
          HEALTHY=false
          for i in {1..12}; do
            if curl -f -s http://localhost/health > /dev/null 2>&1; then
              echo "Health check $i/12 passed"
              if [ $i -ge 3 ]; then
                HEALTHY=true
                break
              fi
            else
              echo "Health check $i/12 failed, retrying..."
            fi
            sleep 10
          done
          
          if [ "$HEALTHY" = false ]; then
            echo "New deployment failed health checks, rolling back..."
            docker-compose -f docker-compose-production.yaml up -d --scale app=1
            sed -i 's/#container_name: roomflux_app/container_name: roomflux_app/' docker-compose-production.yaml
            exit 1
          fi
          
          echo "New containers are healthy! Scaling down old containers..."
          # Scale down to 1 container (removes old container)
          docker-compose -f docker-compose-production.yaml up -d --scale app=1
          
          # Restore container name
          sed -i 's/#container_name: roomflux_app/container_name: roomflux_app/' docker-compose-production.yaml
          
          # Ensure the remaining container has the correct name
          docker-compose -f docker-compose-production.yaml up -d app
          
          echo "Cleaning up unused resources..."
          # Clean up old containers and images
          docker container prune -f
          docker image prune -f
          
          echo "Deployment complete! Zero-downtime deployment successful."
          echo "Application is live at roomflux.com"
